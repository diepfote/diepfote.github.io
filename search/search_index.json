{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Projects, Configs, Cheatsheets projects cheatsheets terminal config tiling window managers package manager helpers","title":"Projects, Configs, Cheatsheets"},{"location":"#projects-configs-cheatsheets","text":"","title":"Projects, Configs, Cheatsheets"},{"location":"#projects","text":"","title":"projects"},{"location":"#cheatsheets","text":"","title":"cheatsheets"},{"location":"#terminal-config","text":"","title":"terminal config"},{"location":"#tiling-window-managers","text":"","title":"tiling window managers"},{"location":"#package-manager-helpers","text":"","title":"package manager helpers"},{"location":"package-manager-helpers/","text":"Package manager helpers Table of contents Brew brew formulae-require brew required-by brew leaves-require Yay and Pacman Pacman Throttle Bandwidth yay-all yay-generate-PKGBUILD-checksum Why? Darwin / Mac OS - brew brew formulae-require find here What does curl depend on? $ brew formulae-require curl curl: brotli ca-certificates gettext libidn2 libnghttp2 libssh2 libunistring openldap openssl@1.1 zstd brew required-by find here Which packages require gettext ? Hint : Highlights the package you were looking for (not shown here). $ brew required-by gettext cairo: ca-certificates fontconfig freetype gdbm gettext glib libffi libpng libpthread-stubs libx11 libxau libxcb libxdmcp libxext libxrender lzo mpdecimal openssl@1.1 pcre pixman pkg-config python@3.9 readline sqlite xorgproto xz ffmpeg: aom bdw-gc brotli ca-certificates cairo cjson cmocka dav1d flac fontconfig freetype frei0r fribidi gdbm gettext giflib glib gmp gnutls gobject-introspection graphite2 guile harfbuzz icu4c imath jpeg jpeg-xl lame leptonica libarchive libass libb2 libbluray libevent libffi libidn2 libnghttp2 libogg libpng libpthread-stubs librist libsamplerate libsndfile libsodium libsoxr libtasn1 libtiff libtool libunistring libvidstab libvmaf libvorbis libvpx libx11 libxau libxcb libxdmcp libxext libxrender little-cms2 lz4 lzo m4 mbedtls mpdecimal nettle opencore-amr openexr openjpeg openssl@1.1 opus p11-kit pcre pixman pkg-config python@3.9 rav1e readline rubberband sdl2 snappy speex sqlite srt tesseract theora unbound webp x264 x265 xorgproto xvid xz zeromq zimg zstd ... brew leaves-require find here Shows all dependencies for all leaf packages: $ brew leaves-require ... pango: ca-certificates cairo fontconfig freetype fribidi gdbm gettext glib gobject-introspection graphite2 harfbuzz icu4c libffi libpng libpthread-stubs libx11 libxau libxcb libxdmcp libxext libxrender lzo mpdecimal openssl@1.1 pcre pixman pkg-config python@3.9 readline sqlite xorgproto xz qemu: bdw-gc ca-certificates gdbm gettext glib gmp gnutls guile jpeg libevent libffi libidn2 libnghttp2 libpng libslirp libssh libtasn1 libtool libunistring libusb lzo m4 mpdecimal ncurses nettle openssl@1.1 p11-kit pcre pixman pkg-config python@3.9 readline snappy sqlite unbound vde xz ... Arch Linux - yay and pacman Pacman Throttle Bandwidth If you are on a slow internet connection and you do not want to break internet access for anyone else on the network (or yourself for that matter) you need to throttle pacman and yay . This is why I wrap both commands. They are throttled or unthrottled based on the file /tmp/pacman-bandwidth-limit . pacman yay This is implemented via trickle . yay-all find here downloads new official packages (runs pacman -Syu ) then executes yay -G <pkg-name (updates PKGBUILD) generates a checksum for the updated PKGBUILD to check if it matches the manually generated checksum if it matches it starts an automated update (root privileges required, single time sudo approval) it does this ^ for a list of packages defined in pkgs_with_saved_checksums=() afterwards it runs a normal yay upgrade and asks the user if he/she want to upgrade the remaining packages yay-generate-PKGBUILD-checksum find here This supplements yay-all. It generates checksums for AUR PKGBUILDs. Why? A PKGBUILD contains a checksum and pkg version section. These alter the checksum generated for a PKGBUILD anytime there is a version update. The point of this function/script is to ignore changes unless instructions in a given PKGBUILD change.","title":"Index"},{"location":"package-manager-helpers/#table-of-contents","text":"Brew brew formulae-require brew required-by brew leaves-require Yay and Pacman Pacman Throttle Bandwidth yay-all yay-generate-PKGBUILD-checksum Why?","title":"Table of contents"},{"location":"package-manager-helpers/#darwin-mac-os-brew","text":"","title":"Darwin / Mac OS - brew"},{"location":"package-manager-helpers/#brew-formulae-require","text":"find here What does curl depend on? $ brew formulae-require curl curl: brotli ca-certificates gettext libidn2 libnghttp2 libssh2 libunistring openldap openssl@1.1 zstd","title":"brew formulae-require"},{"location":"package-manager-helpers/#brew-required-by","text":"find here Which packages require gettext ? Hint : Highlights the package you were looking for (not shown here). $ brew required-by gettext cairo: ca-certificates fontconfig freetype gdbm gettext glib libffi libpng libpthread-stubs libx11 libxau libxcb libxdmcp libxext libxrender lzo mpdecimal openssl@1.1 pcre pixman pkg-config python@3.9 readline sqlite xorgproto xz ffmpeg: aom bdw-gc brotli ca-certificates cairo cjson cmocka dav1d flac fontconfig freetype frei0r fribidi gdbm gettext giflib glib gmp gnutls gobject-introspection graphite2 guile harfbuzz icu4c imath jpeg jpeg-xl lame leptonica libarchive libass libb2 libbluray libevent libffi libidn2 libnghttp2 libogg libpng libpthread-stubs librist libsamplerate libsndfile libsodium libsoxr libtasn1 libtiff libtool libunistring libvidstab libvmaf libvorbis libvpx libx11 libxau libxcb libxdmcp libxext libxrender little-cms2 lz4 lzo m4 mbedtls mpdecimal nettle opencore-amr openexr openjpeg openssl@1.1 opus p11-kit pcre pixman pkg-config python@3.9 rav1e readline rubberband sdl2 snappy speex sqlite srt tesseract theora unbound webp x264 x265 xorgproto xvid xz zeromq zimg zstd ...","title":"brew required-by"},{"location":"package-manager-helpers/#brew-leaves-require","text":"find here Shows all dependencies for all leaf packages: $ brew leaves-require ... pango: ca-certificates cairo fontconfig freetype fribidi gdbm gettext glib gobject-introspection graphite2 harfbuzz icu4c libffi libpng libpthread-stubs libx11 libxau libxcb libxdmcp libxext libxrender lzo mpdecimal openssl@1.1 pcre pixman pkg-config python@3.9 readline sqlite xorgproto xz qemu: bdw-gc ca-certificates gdbm gettext glib gmp gnutls guile jpeg libevent libffi libidn2 libnghttp2 libpng libslirp libssh libtasn1 libtool libunistring libusb lzo m4 mpdecimal ncurses nettle openssl@1.1 p11-kit pcre pixman pkg-config python@3.9 readline snappy sqlite unbound vde xz ...","title":"brew leaves-require"},{"location":"package-manager-helpers/#arch-linux-yay-and-pacman","text":"","title":"Arch Linux - yay and pacman"},{"location":"package-manager-helpers/#pacman-throttle-bandwidth","text":"If you are on a slow internet connection and you do not want to break internet access for anyone else on the network (or yourself for that matter) you need to throttle pacman and yay . This is why I wrap both commands. They are throttled or unthrottled based on the file /tmp/pacman-bandwidth-limit . pacman yay This is implemented via trickle .","title":"Pacman Throttle Bandwidth"},{"location":"package-manager-helpers/#yay-all","text":"find here downloads new official packages (runs pacman -Syu ) then executes yay -G <pkg-name (updates PKGBUILD) generates a checksum for the updated PKGBUILD to check if it matches the manually generated checksum if it matches it starts an automated update (root privileges required, single time sudo approval) it does this ^ for a list of packages defined in pkgs_with_saved_checksums=() afterwards it runs a normal yay upgrade and asks the user if he/she want to upgrade the remaining packages","title":"yay-all"},{"location":"package-manager-helpers/#yay-generate-pkgbuild-checksum","text":"find here This supplements yay-all. It generates checksums for AUR PKGBUILDs.","title":"yay-generate-PKGBUILD-checksum"},{"location":"package-manager-helpers/#why","text":"A PKGBUILD contains a checksum and pkg version section. These alter the checksum generated for a PKGBUILD anytime there is a version update. The point of this function/script is to ignore changes unless instructions in a given PKGBUILD change.","title":"Why?"},{"location":"projects/","text":"Projects Table of contents Youtube video-syncer Sync MPV watch-later files Filestile Local podcast publisher Vim plugins Vim mappings and functions Mini projects Qiime2 Galaxy Wrappers Kubectl completion patching Execute-on-files Execute-in-repos Execute Youtube video-syncer video-syncer Syncs youtube videos between 2 computers via text files. Sync MPV watch-later files sync-mpv-watch-later-files Syncs ~/.config/mpv/watch_later or ~/.local/state/mpv/watch_later directories between 2 computers. Uses functionality found in video-syncer and report-videos.sh Filestile filestile Just keep one file of many that match a condition (and yes, this is a pun on turnstile and file). It will loop through all files in a given directory (non-recursive) if there is a regex match it will keep track of this file and note down its created_date if it encounters another match for this file it will update the entry if the file is older it will then re-loop through all files and remove any file it did not previously keep track of Local podcast publisher local podcast publisher Makes Podcasts available/downloadable on the local network. Particularly useful if no-one officially published it to a podcasting platform. Note: it uses the following ffprobe and ffmpeg helpers: ffprobe ffmpeg Dynamic range compression download and drc a batch of files As I do not like to have my ears blown out or not be able to hear what is being said on in video/on podcast. So I always run dynamic range compression before I add tracks to the podcast feed. Vimscript Vim Plugins Mine primitive-yaml-sort Patched vim-checkbox yaml-vim Vim mappings and functions parrot.nvim mappings : a llm chat plugin coc.nvim mappings : a language server plugin vim-ReplaceWithRegister mappings : a plugin to simplify text replacement visual copy to register mappings : functions and mappings to simplify text yanking/copying colorscheme handling : ensure your colorscheme uses light! Base64 encoding/decoding : encode/decode your selection or the entire file Yaml to json (and vice-versa) : convert your selection or the entire file Mini projects github gists Qiime2 Galaxy Wrappers Version: 2019.7 repo installable package for Galaxy Project What was done We auto-generated xml config files for a Galaxy Project to integrate the qiime2 cli into the UI of this tool. Qiime2 includes several commands and subcommands, each of these have their own options and flags. These needed to be parsed from the initial help page and then converted to a xml file per command-subcommand combination. Example help output: (qiime2-2019.7) root@dd8a4d319d86:/data# qiime vsearch cluster-features-de-novo --help Usage: qiime vsearch cluster-features-de-novo [OPTIONS] Given a feature table and the associated feature sequences, cluster the features based on user-specified percent identity threshold of their sequences. This is not a general-purpose de novo clustering method, but rather is intended to be used for clustering the results of quality- filtering/dereplication methods, such as DADA2, or for re-clustering a FeatureTable at a lower percent identity than it was originally clustered at. When a group of features in the input table are clustered into a single feature, the frequency of that single feature in a given sample is the sum of the frequencies of the features that were clustered in that sample. Feature identifiers and sequences will be inherited from the centroid feature of each cluster. See the vsearch documentation for details on how sequence clustering is performed. Inputs: --i-sequences ARTIFACT FeatureData[Sequence] The sequences corresponding to the features in table. [required] --i-table ARTIFACT FeatureTable[Frequency] The feature table to be clustered. [required] Parameters: --p-perc-identity PROPORTION Range(0, 1, inclusive_start=False, inclusive_end=True) The percent identity at which clustering should be performed. This parameter maps to vsearch's --id parameter. [required] --p-threads INTEGER Range(0, 256, inclusive_end=True) The number of threads to use for computation. Passing 0 will launch one thread per CPU core. [default: 1] Outputs: --o-clustered-table ARTIFACT FeatureTable[Frequency] The table following clustering of features. [required] --o-clustered-sequences ARTIFACT FeatureData[Sequence] Sequences representing clustered features. [required] Miscellaneous: --output-dir PATH Output unspecified results to a directory --verbose / --quiet Display verbose output to stdout and/or stderr during execution of this action. Or silence output if execution is successful (silence is golden). --citations Show citations and exit. --help Show this message and exit. generated xml: <?xml version=\"1.0\" ?> <tool id=\"qiime_vsearch_cluster-features-de-novo\" name=\"qiime vsearch cluster-features-de-novo\" version=\"2019.7\"> <description> - De novo clustering of features.</description> <requirements> <requirement type=\"package\" version=\"2019.7\">qiime2</requirement> </requirements> <command><![CDATA[ qiime vsearch cluster-features-de-novo --i-sequences=$isequences --i-table=$itable --p-perc-identity=\"$ppercidentity\" #set $pthreads = '${GALAXY_SLOTS:-4}' #if str($pthreads): --p-threads=\"$pthreads\" #end if --o-clustered-table=oclusteredtable --o-clustered-sequences=oclusteredsequences ; cp oclusteredtable.qza $oclusteredtable; cp oclusteredsequences.qza $oclusteredsequences ]]></command> <inputs> <param format=\"qza,no_unzip.zip\" label=\"--i-sequences: ARTIFACT FeatureData[Sequence] The sequences corresponding to the features in table. [required]\" name=\"isequences\" optional=\"False\" type=\"data\"/> <param format=\"qza,no_unzip.zip\" label=\"--i-table: ARTIFACT FeatureTable[Frequency] The feature table to be clustered. [required]\" name=\"itable\" optional=\"False\" type=\"data\"/> <param label=\"--p-perc-identity: PROPORTION Range(0, 1, inclusive_start=False, inclusive_end=True) The percent identity at which clustering should be performed. This parameter maps to vsearch's --id parameter. [required]\" name=\"ppercidentity\" optional=\"False\" min=\"0\" max=\"1\" value=\"\" exclude_min=\"True\" exclude_max=\"False\" type=\"float\"/> </inputs> <outputs> <data format=\"qza\" label=\"${tool.name} on ${on_string}: clusteredtable.qza\" name=\"oclusteredtable\"/> <data format=\"qza\" label=\"${tool.name} on ${on_string}: clusteredsequences.qza\" name=\"oclusteredsequences\"/> </outputs> <help><![CDATA[ De novo clustering of features. ############################### Given a feature table and the associated feature sequences, cluster the features based on user-specified percent identity threshold of their sequences. This is not a general-purpose de novo clustering method, but rather is intended to be used for clustering the results of quality- filtering/dereplication methods, such as DADA2, or for re-clustering a FeatureTable at a lower percent identity than it was originally clustered at. When a group of features in the input table are clustered into a single feature, the frequency of that single feature in a given sample is the sum of the frequencies of the features that were clustered in that sample. Feature identifiers and sequences will be inherited from the centroid feature of each cluster. See the vsearch documentation for details on how sequence clustering is performed. Parameters ---------- sequences : FeatureData[Sequence] The sequences corresponding to the features in table. table : FeatureTable[Frequency] The feature table to be clustered. perc_identity : Float % Range(0, 1, inclusive_start=False, inclusive_end=True) The percent identity at which clustering should be performed. This parameter maps to vsearch's --id parameter. Returns ------- clustered_table : FeatureTable[Frequency] The table following clustering of features. clustered_sequences : FeatureData[Sequence] Sequences representing clustered features. ]]></help> <macros> <import>qiime_citation.xml</import> </macros> <expand macro=\"qiime_citation\"/> </tool> Kubectl Completion Patching What does it do? It allows you to add completions for custom written kubectl plugins, krew plugins and you can even modify how things like namespaces are completed. Lattermost I use to cache namespaces if the $KUBECONFIG is unmodified. This way if I hit <TAB> after -n I receive suggestions without delay. For more details click Execute-on-files Run arbitrary commands on files simultaneously/concurrently. For more details click Execute-in-repos Run arbitrary commands in git repos or plain old directories simultaneously/concurrently. For more details click Execute A replacement of execute-in-repos and execute-on-files written in rust. For more details click","title":"Index"},{"location":"projects/#table-of-contents","text":"Youtube video-syncer Sync MPV watch-later files Filestile Local podcast publisher Vim plugins Vim mappings and functions Mini projects Qiime2 Galaxy Wrappers Kubectl completion patching Execute-on-files Execute-in-repos Execute","title":"Table of contents"},{"location":"projects/#youtube-video-syncer","text":"video-syncer Syncs youtube videos between 2 computers via text files.","title":"Youtube video-syncer"},{"location":"projects/#sync-mpv-watch-later-files","text":"sync-mpv-watch-later-files Syncs ~/.config/mpv/watch_later or ~/.local/state/mpv/watch_later directories between 2 computers. Uses functionality found in video-syncer and report-videos.sh","title":"Sync MPV watch-later files"},{"location":"projects/#filestile","text":"filestile Just keep one file of many that match a condition (and yes, this is a pun on turnstile and file). It will loop through all files in a given directory (non-recursive) if there is a regex match it will keep track of this file and note down its created_date if it encounters another match for this file it will update the entry if the file is older it will then re-loop through all files and remove any file it did not previously keep track of","title":"Filestile"},{"location":"projects/#local-podcast-publisher","text":"local podcast publisher Makes Podcasts available/downloadable on the local network. Particularly useful if no-one officially published it to a podcasting platform. Note: it uses the following ffprobe and ffmpeg helpers: ffprobe ffmpeg","title":"Local podcast publisher"},{"location":"projects/#dynamic-range-compression","text":"download and drc a batch of files As I do not like to have my ears blown out or not be able to hear what is being said on in video/on podcast. So I always run dynamic range compression before I add tracks to the podcast feed.","title":"Dynamic range compression"},{"location":"projects/#vimscript","text":"","title":"Vimscript"},{"location":"projects/#vim-plugins","text":"","title":"Vim Plugins"},{"location":"projects/#mine","text":"primitive-yaml-sort","title":"Mine"},{"location":"projects/#patched","text":"vim-checkbox yaml-vim","title":"Patched"},{"location":"projects/#vim-mappings-and-functions","text":"parrot.nvim mappings : a llm chat plugin coc.nvim mappings : a language server plugin vim-ReplaceWithRegister mappings : a plugin to simplify text replacement visual copy to register mappings : functions and mappings to simplify text yanking/copying colorscheme handling : ensure your colorscheme uses light! Base64 encoding/decoding : encode/decode your selection or the entire file Yaml to json (and vice-versa) : convert your selection or the entire file","title":"Vim mappings and functions"},{"location":"projects/#mini-projects","text":"github gists","title":"Mini projects"},{"location":"projects/#qiime2-galaxy-wrappers","text":"Version: 2019.7 repo installable package for Galaxy Project","title":"Qiime2 Galaxy Wrappers"},{"location":"projects/#what-was-done","text":"We auto-generated xml config files for a Galaxy Project to integrate the qiime2 cli into the UI of this tool. Qiime2 includes several commands and subcommands, each of these have their own options and flags. These needed to be parsed from the initial help page and then converted to a xml file per command-subcommand combination.","title":"What was done"},{"location":"projects/#example","text":"help output: (qiime2-2019.7) root@dd8a4d319d86:/data# qiime vsearch cluster-features-de-novo --help Usage: qiime vsearch cluster-features-de-novo [OPTIONS] Given a feature table and the associated feature sequences, cluster the features based on user-specified percent identity threshold of their sequences. This is not a general-purpose de novo clustering method, but rather is intended to be used for clustering the results of quality- filtering/dereplication methods, such as DADA2, or for re-clustering a FeatureTable at a lower percent identity than it was originally clustered at. When a group of features in the input table are clustered into a single feature, the frequency of that single feature in a given sample is the sum of the frequencies of the features that were clustered in that sample. Feature identifiers and sequences will be inherited from the centroid feature of each cluster. See the vsearch documentation for details on how sequence clustering is performed. Inputs: --i-sequences ARTIFACT FeatureData[Sequence] The sequences corresponding to the features in table. [required] --i-table ARTIFACT FeatureTable[Frequency] The feature table to be clustered. [required] Parameters: --p-perc-identity PROPORTION Range(0, 1, inclusive_start=False, inclusive_end=True) The percent identity at which clustering should be performed. This parameter maps to vsearch's --id parameter. [required] --p-threads INTEGER Range(0, 256, inclusive_end=True) The number of threads to use for computation. Passing 0 will launch one thread per CPU core. [default: 1] Outputs: --o-clustered-table ARTIFACT FeatureTable[Frequency] The table following clustering of features. [required] --o-clustered-sequences ARTIFACT FeatureData[Sequence] Sequences representing clustered features. [required] Miscellaneous: --output-dir PATH Output unspecified results to a directory --verbose / --quiet Display verbose output to stdout and/or stderr during execution of this action. Or silence output if execution is successful (silence is golden). --citations Show citations and exit. --help Show this message and exit. generated xml: <?xml version=\"1.0\" ?> <tool id=\"qiime_vsearch_cluster-features-de-novo\" name=\"qiime vsearch cluster-features-de-novo\" version=\"2019.7\"> <description> - De novo clustering of features.</description> <requirements> <requirement type=\"package\" version=\"2019.7\">qiime2</requirement> </requirements> <command><![CDATA[ qiime vsearch cluster-features-de-novo --i-sequences=$isequences --i-table=$itable --p-perc-identity=\"$ppercidentity\" #set $pthreads = '${GALAXY_SLOTS:-4}' #if str($pthreads): --p-threads=\"$pthreads\" #end if --o-clustered-table=oclusteredtable --o-clustered-sequences=oclusteredsequences ; cp oclusteredtable.qza $oclusteredtable; cp oclusteredsequences.qza $oclusteredsequences ]]></command> <inputs> <param format=\"qza,no_unzip.zip\" label=\"--i-sequences: ARTIFACT FeatureData[Sequence] The sequences corresponding to the features in table. [required]\" name=\"isequences\" optional=\"False\" type=\"data\"/> <param format=\"qza,no_unzip.zip\" label=\"--i-table: ARTIFACT FeatureTable[Frequency] The feature table to be clustered. [required]\" name=\"itable\" optional=\"False\" type=\"data\"/> <param label=\"--p-perc-identity: PROPORTION Range(0, 1, inclusive_start=False, inclusive_end=True) The percent identity at which clustering should be performed. This parameter maps to vsearch's --id parameter. [required]\" name=\"ppercidentity\" optional=\"False\" min=\"0\" max=\"1\" value=\"\" exclude_min=\"True\" exclude_max=\"False\" type=\"float\"/> </inputs> <outputs> <data format=\"qza\" label=\"${tool.name} on ${on_string}: clusteredtable.qza\" name=\"oclusteredtable\"/> <data format=\"qza\" label=\"${tool.name} on ${on_string}: clusteredsequences.qza\" name=\"oclusteredsequences\"/> </outputs> <help><![CDATA[ De novo clustering of features. ############################### Given a feature table and the associated feature sequences, cluster the features based on user-specified percent identity threshold of their sequences. This is not a general-purpose de novo clustering method, but rather is intended to be used for clustering the results of quality- filtering/dereplication methods, such as DADA2, or for re-clustering a FeatureTable at a lower percent identity than it was originally clustered at. When a group of features in the input table are clustered into a single feature, the frequency of that single feature in a given sample is the sum of the frequencies of the features that were clustered in that sample. Feature identifiers and sequences will be inherited from the centroid feature of each cluster. See the vsearch documentation for details on how sequence clustering is performed. Parameters ---------- sequences : FeatureData[Sequence] The sequences corresponding to the features in table. table : FeatureTable[Frequency] The feature table to be clustered. perc_identity : Float % Range(0, 1, inclusive_start=False, inclusive_end=True) The percent identity at which clustering should be performed. This parameter maps to vsearch's --id parameter. Returns ------- clustered_table : FeatureTable[Frequency] The table following clustering of features. clustered_sequences : FeatureData[Sequence] Sequences representing clustered features. ]]></help> <macros> <import>qiime_citation.xml</import> </macros> <expand macro=\"qiime_citation\"/> </tool>","title":"Example"},{"location":"projects/#kubectl-completion-patching","text":"What does it do? It allows you to add completions for custom written kubectl plugins, krew plugins and you can even modify how things like namespaces are completed. Lattermost I use to cache namespaces if the $KUBECONFIG is unmodified. This way if I hit <TAB> after -n I receive suggestions without delay. For more details click","title":"Kubectl Completion Patching"},{"location":"projects/#execute-on-files","text":"Run arbitrary commands on files simultaneously/concurrently. For more details click","title":"Execute-on-files"},{"location":"projects/#execute-in-repos","text":"Run arbitrary commands in git repos or plain old directories simultaneously/concurrently. For more details click","title":"Execute-in-repos"},{"location":"projects/#execute","text":"A replacement of execute-in-repos and execute-on-files written in rust. For more details click","title":"Execute"},{"location":"terminal-config/","text":"Terminal Config Table of contents dot-files bash script & source-me collection golang-tools use in tmux rust-tools python-tools extend kubectl bash completions/extend oc bash completions miscellaneous vimscript git git resubmit git get-upstream dot-files The config I use is split among several repos. The main config resides in the dot-files repo . It references the scripts repo which in turn references the python-tools , golang-tools and rust-tools repos. repo tmux config bash script & source-me collection repo This repo contains the following in the root of the repository: general scripts that will be referenced directly (not on the PATH): An example would be the i3cat-audio-device-helper.sh for my i3 config . scripts for use in PATH in the bin/ folder files in the source-me/ folder that are meant to be used with source <file> : completion config, functions rather than executables, aliases and global variables kubernetes plugins (etc) in kubernetes/ bin Scripts used as wrappers (e.g. git wrapper) or additional executables. The bin/ folder contains additional folders for executables that might not want to be used on every system. It distinguishes between Mac OS and Linux. golang-tools repo Tools where I care about speed are not written in bash or python. I instead tried go, zig and rust. For most of them I stuck to go. I never considered c++ as I am not a fan and abstained from c as it is harder to port between systems than aforementioned languages. Use in tmux Pane-border now displays the current git branch and whether it is in sync with the upstream branch (based on the last git fetch ). Statusbar-right is used to display the current kubernetes cluster and openstack project. pane-border statusbar-right python-tools repo As I am intimately familiar with python it is my go to programming language. If the tasks cannot be accomplished in a scripting language easily and I do not care about speed or I need it now, I will write it in python. extend kubectl bash completions Kubectl does not provide functionality to add completions for krew plugings or hand-rolled plugins ( kubectl-x_y_z executable files). This is my remedy . miscellaneous Here is a list of several things I needed or wanted to have: display ics calender files in plaintext convert latex editor Gummi snippets to Gedit snippets read toml setting urldecode/-encode regex substitution rust-tools repo So far I only wrote a bash helper. It displays the current PATH and active .venv. It then colors and shortens them so they are still readable if there are several tmux panes. After trying go and zig I decided to see if rust would be even faster for the task. I am sticking to it for now. I override the PROMPT_COMMAND here . Thus, anytime you hit Enter the PROMPT_COMMAND will use the _ps1 function to set the PS1 variable. This variable is used by bash to display information on every prompt e.g. the current path. vimscript Please refer to projects in vimscript . My vim config: repo git Git functionality extensions I decided to stick to plain git config for most functionality instead of writing separate bash helpers. The ones I use most often are git find-commits-changed-file , git resubmit , git get-upstream : link to aliases git resubmit git add the files you specified as parameters to the staging area run git commit --amend --no-edit run git push --force-with-lease , if you require --force use git resubmit-force Note that git redo is also available, it does the same thing but stops short of pushing to the repo. git get-upstream Runs git update , which moves to master and git pull s it. Should this fail it runs a git fetch origin/master only. It moves back to the previous branch It runs git rebase master TL;DR: Rebases current branch onto origin/master Rarely used but gems if you need them git list-all-files-ever-tracked and git reflog-list-all-files-ever-tracked : sometimes you are looking for an old file and you half-remember its path... git content-grep and git log-grep : look for part of a file across the history of the entire repo. Or for a certain commit message... Fast access to various repos For faster access to the numerous git repos I use for my config I set up bash functions to operate on them from any path. These jump to these repos/files directly: general , linux only All of these use custom completion rules (if you hit tab bash will provide a list of files in the actual repo, not the current directory). This is an example of how these completions are set up. Examples are: edit-script log-script commit-script reset-script diff-script status-script edit-go log-go commit-go reset-go diff-go status-go","title":"Index"},{"location":"terminal-config/#table-of-contents","text":"dot-files bash script & source-me collection golang-tools use in tmux rust-tools python-tools extend kubectl bash completions/extend oc bash completions miscellaneous vimscript git git resubmit git get-upstream","title":"Table of contents"},{"location":"terminal-config/#dot-files","text":"The config I use is split among several repos. The main config resides in the dot-files repo . It references the scripts repo which in turn references the python-tools , golang-tools and rust-tools repos. repo tmux config","title":"dot-files"},{"location":"terminal-config/#bash-script-source-me-collection","text":"repo This repo contains the following in the root of the repository: general scripts that will be referenced directly (not on the PATH): An example would be the i3cat-audio-device-helper.sh for my i3 config . scripts for use in PATH in the bin/ folder files in the source-me/ folder that are meant to be used with source <file> : completion config, functions rather than executables, aliases and global variables kubernetes plugins (etc) in kubernetes/","title":"bash script &amp; source-me collection"},{"location":"terminal-config/#bin","text":"Scripts used as wrappers (e.g. git wrapper) or additional executables. The bin/ folder contains additional folders for executables that might not want to be used on every system. It distinguishes between Mac OS and Linux.","title":"bin"},{"location":"terminal-config/#golang-tools","text":"repo Tools where I care about speed are not written in bash or python. I instead tried go, zig and rust. For most of them I stuck to go. I never considered c++ as I am not a fan and abstained from c as it is harder to port between systems than aforementioned languages.","title":"golang-tools"},{"location":"terminal-config/#use-in-tmux","text":"Pane-border now displays the current git branch and whether it is in sync with the upstream branch (based on the last git fetch ). Statusbar-right is used to display the current kubernetes cluster and openstack project. pane-border statusbar-right","title":"Use in tmux"},{"location":"terminal-config/#python-tools","text":"repo As I am intimately familiar with python it is my go to programming language. If the tasks cannot be accomplished in a scripting language easily and I do not care about speed or I need it now, I will write it in python.","title":"python-tools"},{"location":"terminal-config/#extend-kubectl-bash-completions","text":"Kubectl does not provide functionality to add completions for krew plugings or hand-rolled plugins ( kubectl-x_y_z executable files). This is my remedy .","title":"extend kubectl bash completions"},{"location":"terminal-config/#miscellaneous","text":"Here is a list of several things I needed or wanted to have: display ics calender files in plaintext convert latex editor Gummi snippets to Gedit snippets read toml setting urldecode/-encode regex substitution","title":"miscellaneous"},{"location":"terminal-config/#rust-tools","text":"repo So far I only wrote a bash helper. It displays the current PATH and active .venv. It then colors and shortens them so they are still readable if there are several tmux panes. After trying go and zig I decided to see if rust would be even faster for the task. I am sticking to it for now. I override the PROMPT_COMMAND here . Thus, anytime you hit Enter the PROMPT_COMMAND will use the _ps1 function to set the PS1 variable. This variable is used by bash to display information on every prompt e.g. the current path.","title":"rust-tools"},{"location":"terminal-config/#vimscript","text":"Please refer to projects in vimscript . My vim config: repo","title":"vimscript"},{"location":"terminal-config/#git","text":"","title":"git"},{"location":"terminal-config/#git-functionality-extensions","text":"I decided to stick to plain git config for most functionality instead of writing separate bash helpers. The ones I use most often are git find-commits-changed-file , git resubmit , git get-upstream : link to aliases","title":"Git functionality extensions"},{"location":"terminal-config/#git-resubmit","text":"git add the files you specified as parameters to the staging area run git commit --amend --no-edit run git push --force-with-lease , if you require --force use git resubmit-force Note that git redo is also available, it does the same thing but stops short of pushing to the repo.","title":"git resubmit"},{"location":"terminal-config/#git-get-upstream","text":"Runs git update , which moves to master and git pull s it. Should this fail it runs a git fetch origin/master only. It moves back to the previous branch It runs git rebase master TL;DR: Rebases current branch onto origin/master","title":"git get-upstream"},{"location":"terminal-config/#rarely-used-but-gems-if-you-need-them","text":"git list-all-files-ever-tracked and git reflog-list-all-files-ever-tracked : sometimes you are looking for an old file and you half-remember its path... git content-grep and git log-grep : look for part of a file across the history of the entire repo. Or for a certain commit message...","title":"Rarely used but gems if you need them"},{"location":"terminal-config/#fast-access-to-various-repos","text":"For faster access to the numerous git repos I use for my config I set up bash functions to operate on them from any path. These jump to these repos/files directly: general , linux only All of these use custom completion rules (if you hit tab bash will provide a list of files in the actual repo, not the current directory). This is an example of how these completions are set up. Examples are: edit-script log-script commit-script reset-script diff-script status-script edit-go log-go commit-go reset-go diff-go status-go","title":"Fast access to various repos"},{"location":"terminal-config/kubectl-bash-completion-patching/","text":"Extend kubectl bash completions/extend oc bash completions e.g. add bash completions for krew plugins Table of contents What does this do? Examples Where to find What does this do? It includes krew plugins and my kubectl plugins in the root command completion. It also provides custom completions for each of my kubectl plugins . Examples Additional root commands in completion before: $ oc adm auth convert diff extract label new-project port-forward replace scale tag annotate autoscale cp edit get login observe process rollback secrets version api-resources cancel-build create ex idle logout options project rollout serviceaccounts wait api-versions cluster-info debug exec image logs patch projects rsh set whoami apply completion delete explain import-image new-app plugin proxy rsync start-build attach config describe expose kustomize new-build policy registry run status after: $ oc adm delete kustomize policy serviceaccounts af-arbitrary-command delete-namespace-finalizer label port-forward set annotate describe login process sick-pods api-resources diff logout project start-build api-versions edit logs projects status apply ex modify-secret proxy tag attach exec neat rbac-lookup tmux-exec auth explain new-app registry topology autoscale expose new-build replace ttsum cancel-build extract new-project restart-af-services velero-annotate-all-volumes-for-pod cluster-info fields node-shell rollback version completion get non-running-nodes rollout view-secret config get-all-resources non-running-pods rsh wait convert idle observe rsync warp cp image options run watch-namespace create images patch scale who-can debug import-image plugin secrets whoami Option completion for custom plugins $ kubectl watch-namespace -n openshift openshift-metrics-server openshift-console openshift-node openshift-infra openshift-template-service-broker openshift-local-storage openshift-web-console openshift-logging Where to find kubectl completion patcher README oc completion patcher README","title":"Extend kubectl bash completions/extend oc bash completions"},{"location":"terminal-config/kubectl-bash-completion-patching/#extend-kubectl-bash-completionsextend-oc-bash-completions","text":"e.g. add bash completions for krew plugins","title":"Extend kubectl bash completions/extend oc bash completions"},{"location":"terminal-config/kubectl-bash-completion-patching/#table-of-contents","text":"What does this do? Examples Where to find","title":"Table of contents"},{"location":"terminal-config/kubectl-bash-completion-patching/#what-does-this-do","text":"It includes krew plugins and my kubectl plugins in the root command completion. It also provides custom completions for each of my kubectl plugins .","title":"What does this do?"},{"location":"terminal-config/kubectl-bash-completion-patching/#examples","text":"","title":"Examples"},{"location":"terminal-config/kubectl-bash-completion-patching/#additional-root-commands-in-completion","text":"before: $ oc adm auth convert diff extract label new-project port-forward replace scale tag annotate autoscale cp edit get login observe process rollback secrets version api-resources cancel-build create ex idle logout options project rollout serviceaccounts wait api-versions cluster-info debug exec image logs patch projects rsh set whoami apply completion delete explain import-image new-app plugin proxy rsync start-build attach config describe expose kustomize new-build policy registry run status after: $ oc adm delete kustomize policy serviceaccounts af-arbitrary-command delete-namespace-finalizer label port-forward set annotate describe login process sick-pods api-resources diff logout project start-build api-versions edit logs projects status apply ex modify-secret proxy tag attach exec neat rbac-lookup tmux-exec auth explain new-app registry topology autoscale expose new-build replace ttsum cancel-build extract new-project restart-af-services velero-annotate-all-volumes-for-pod cluster-info fields node-shell rollback version completion get non-running-nodes rollout view-secret config get-all-resources non-running-pods rsh wait convert idle observe rsync warp cp image options run watch-namespace create images patch scale who-can debug import-image plugin secrets whoami","title":"Additional root commands in completion"},{"location":"terminal-config/kubectl-bash-completion-patching/#option-completion-for-custom-plugins","text":"$ kubectl watch-namespace -n openshift openshift-metrics-server openshift-console openshift-node openshift-infra openshift-template-service-broker openshift-local-storage openshift-web-console openshift-logging","title":"Option completion for custom plugins"},{"location":"terminal-config/kubectl-bash-completion-patching/#where-to-find","text":"kubectl completion patcher README oc completion patcher README","title":"Where to find"},{"location":"tiling-window-managers/","text":"Tiling window managers config Table of contents Darwin / Mac OS Window manager Hotkeys / Key bindings Linux Main config Statusbar config Darwin / Mac OS Window manager I used to use skhd + yabai but this requires security downgrades on Mac OS. I have since switched to Amethyst . Make no mistake, this is no i3 but yabai never was either. Hotkeys / Key bindings I use Karabiner-Elements a keyboard customizer for macOS. My config lives here . Linux I use i3 . The config can be found in the sections below. -- What it looks like Main config This config sets hotkeys and workspace (virtual desktops) config. It also configures an i3 statusbar helper. The main config can be found here . Sidenote : i3 startup is handled via .xinitrc Statusbar config The config uses an extra tool instead of plain i3status : i3cat The main i3cat config lives here The config above uses two i3status processes plus a separate script to display audio levels The config for those i3status processes can be found here .","title":"Index"},{"location":"tiling-window-managers/#table-of-contents","text":"Darwin / Mac OS Window manager Hotkeys / Key bindings Linux Main config Statusbar config","title":"Table of contents"},{"location":"tiling-window-managers/#darwin-mac-os","text":"","title":"Darwin / Mac OS"},{"location":"tiling-window-managers/#window-manager","text":"I used to use skhd + yabai but this requires security downgrades on Mac OS. I have since switched to Amethyst . Make no mistake, this is no i3 but yabai never was either.","title":"Window manager"},{"location":"tiling-window-managers/#hotkeys-key-bindings","text":"I use Karabiner-Elements a keyboard customizer for macOS. My config lives here .","title":"Hotkeys / Key bindings"},{"location":"tiling-window-managers/#linux","text":"I use i3 . The config can be found in the sections below. -- What it looks like","title":"Linux"},{"location":"tiling-window-managers/#main-config","text":"This config sets hotkeys and workspace (virtual desktops) config. It also configures an i3 statusbar helper. The main config can be found here . Sidenote : i3 startup is handled via .xinitrc","title":"Main config"},{"location":"tiling-window-managers/#statusbar-config","text":"The config uses an extra tool instead of plain i3status : i3cat The main i3cat config lives here The config above uses two i3status processes plus a separate script to display audio levels The config for those i3status processes can be found here .","title":"Statusbar config"}]}